# coding: utf-8
# Copyright (c) HiddenSymmetries Development Team.
# Distributed under the terms of the LGPL License

"""
This module provides a class that handles the BOOZ_XFORM code.
"""

import logging
import os.path
import datetime
import numpy as np
import f90nml
from scipy.io import netcdf

from simsopt.core.optimizable import Optimizable
from simsopt.core.surface import SurfaceRZFourier
from simsopt.core.util import Struct
from simsopt.core.run_standalone import run_standalone
from simsopt.mhd.vmec_standalone import VmecStandalone

logger = logging.getLogger(__name__)

class BoozXformStandalone(Optimizable):
    """
    This class represents the BOOZ_XFORM code.
    """
    def __init__(self,
                 equil: VmecStandalone,
                 mboz: int = 32,
                 nboz: int = 32,
                 exe: str = "xbooz_xform"):
        """
        Constructor
        """
        self.equil = equil
        self.exe = exe
        self.mboz = mboz
        self.nboz = nboz

        self.depends_on = ["equil"]
        self.fixed = []
        self.names = []
        self.need_to_run_code = True

    def write_input(self, filename, extension):
        """
        Write a BOOZ_XFORM input file.
        """

        f = open(filename, 'w')
        f.write('{} {}\n'.format(self.mboz, self.nboz))
        f.write('{}\n'.format(extension))
        f.write('{} 3 4\n'.format(2))
        #f.write('! Input file generated by simsopt on {}\n'\
        #        .format(datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")))
        #f.write('! Format:\n')
        #f.write('! mboz nboz\n')
        #f.write('! wout_filename\n')
        #f.write('! surface indices\n')
        f.close()
        
    def get_dofs(self):
        return np.array([])

    def set_dofs(self, x):
        self.need_to_run_code = True
        
    def read_boozmn_nc(self, filename):
        """
        Read in a boozmn_<extension>.nc file, storing selected variables in a "nc"
        class that is an attribute of this class.
        """
        self.nc = Struct()
        fields = ['bmnc_b']
        f = netcdf.netcdf_file(filename, 'r', mmap=False)
        for field in fields:
            setattr(self.nc, field, f.variables[field][()])
        f.close()
        
    def run(self):
        """
        Run BOOZ_XFORM, if needed.
        """
        if not self.need_to_run_code:
            logger.info("run() called but no need to re-run BOOZ_XFORM.")
            return
        logger.info("Preparing to run BOOZ_XFORM.")

        # Make sure VMEC has run. If it has already run since the last
        # update to the state vector, vmec's run() function will
        # return immediately without actually running the code.
        self.equil.run()
        
        # Set filenames:
        wout_filename = self.equil.wout_filename
        extension = wout_filename[5:-3]
        input_filename = "in_booz.{}".format(extension)
        code_name = "booz_xform.{}".format(extension) # Used for stdout/stderr
        boozmn_filename = "boozmn_{}.nc".format(extension)
        
        self.write_input(input_filename, extension)
        # Form command to run the executable:
        cmd = (self.exe + " " + input_filename).split()
        success = run_standalone(cmd, code_name)
        if not success:
            raise RuntimeError('BOOZ_XFORM failed')
        self.read_boozmn_nc(boozmn_filename)
        self.need_to_run_code = False
        
    def bmnc(self):
        """
        Return the bmnc array
        """
        self.run()
        return self.nc.bmnc_b

